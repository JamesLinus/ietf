
Appendix A.  Design Considerations

A.1.  General

   As there is not yet WG consensus on which of the alternative
   described in this document (identical versus different port number
   values in the "m=" lines associated with a "BUNDLE" group), this
   Appendix discusses associated with each alternative.

   Below are the primary issues to consider when selecting between the
   alternatives:
   o  1) Interoperability with existing UAs.
   o  2) Interoperability with intermediary B2BUA- and proxy entities.
   o  3) Time to gather, and the number of, ICE candidates.
   o  4) Different error scenarios, and when they occur.
   o  5) SDP Offer/Answer impacts, including usage of port number value
      zero.

   NOTE: Before this document is published as an RFC, this Appendix will
   be removed.

A.2.  UA Interoperability

   Consider the following offer / answer exchange where Alice make an
   offer to Bob:


   SDP Offer

       v=0
       o=alice 2890844526 2890844526 IN IP4 host.atlanta.com
       s=
       c=IN IP4 host.atlanta.com
       t=0 0
       m=audio 10000 RTP/AVP 97
       a=rtpmap:97 iLBC/8000
       m=video 10002 RTP/AVP 97
       a=rtpmap:97 H261/90000


   SDP Answer

       v=0
       o=bob 2808844564 2808844564 IN IP4 host.biloxi.com
       s=
       c=IN IP4 host.biloxi.com
       t=0 0
       m=audio 20000 RTP/AVP 97
       a=rtpmap:97 iLBC/8000
       m=video 20002 RTP/AVP 97
       a=rtpmap:97 H261/90000


   RFC 4961 specifies a way of doing symmetric RTP but that is an a
   later invention to RTP and Bob can not assume that Alice supports RFC
   4961.  This means that Alice may be sending RTP from a different port
   than 10000 or 10002 - some implementation simply send the RTP from an
   ephemeral port.  When Bob's endpoint receives an RTP packet, the only
   way that Bob know if it should be passed to the video or audio codec
   is by looking at the port it was received on.  This lead some SDP
   implementations to use the fact that each "m=" line had a different
   port number to use that port number as an index to find the correct m
   line in the SDP.  As a result, some implementations that do support
   symmetric RTP and ICE still use a SDP data structure where SDP with
   "m=" lines with the same port such as:


   SDP Offer

       v=0
       o=alice 2890844526 2890844526 IN IP4 host.atlanta.com
       s=
       c=IN IP4 host.atlanta.com
       t=0 0
       m=audio 10000 RTP/AVP 97
       a=rtpmap:97 iLBC/8000
       m=video 10000 RTP/AVP 98
       a=rtpmap:98 H261/90000



   will result in the second "m=" line being considered an SDP error
   because it has the same port as the first line.

A.3.  Usage of port number value zero

   In SDP Offer/Answer, the media associated with an "m=" line can be
   disabled by setting the port number value to zero.  This is different
   from e.g. using the SDP direction attributes, where RTCP traffic will
   continue even if the SDP "inactive" attribute is indicated for the
   associated "m=" line.

   In ALTERNATIVE 1, each "m=" line of the SDP Offer contains different
   port number values.  Then, if both endpoints support the "BUNDLE"
   mechanism, only the port value number of the first "m=" line
   associated with the "BUNDLE" group will be used for all bundled
   media.  But, what happens if an entity, for whatever reason, choses
   to disable the first "m=" line?  After that, the port number value
   for the bundled media will not be visible anywhere in the SDP.  In
   addition, what will happen to the ICE candidates associated with the
   "m=" line, as they are also used for all bundled media?

A.4.  B2BUA And Proxy Interoperability

   Some back to back user agents may be configured in a mode where if
   the incoming call leg contains an SDP attribute the B2BUA does not
   understand, the B2BUS still generates that SDP attribute in the Offer
   for the outgoing call leg.  Consider an B2BUA that did not understand
   the SDP "rtcp" attribute, defined in RFC 3605, yet acted this way.
   Further assume that the B2BUA was configured to tear down any call
   where it did not see any RTCP for 5 minutes.  In this cases, if the
   B2BUA received an Offer like:


   SDP Offer

       v=0
       o=alice 2890844526 2890844526 IN IP4 host.atlanta.com
       s=
       c=IN IP4 host.atlanta.com
       t=0 0
       m=audio 49170 RTP/AVP 0
       a=rtcp:53020



   It would be looking for RTCP on port 49172 but would not see any
   because the RTCP would be on port 53020 and after five minutes, it
   would tear down the call.  Similarly, an SBC that did not understand
   BUNDLE yet put BUNDLE in it's offer may be looking for media on the
   wrong port and tear down the call.  It is worth noting that a B2BUA
   that generated an Offer with capabilities it does not understand is
   not compliant with the specifications.


A.4.1.  Traffic Policing

   Sometimes intermediaries do not act as B2BUA, in the sense that they
   don't modify SDP bodies, nor do they terminate SIP dialogs.  Still,
   however, they may use SDP information (e.g.  IP address and port) in
   order to control traffic gating functions, and to set traffic
   policing rules.  There might be rules which will trigger a session to
   be terminated in case media is not sent or received on the ports
   retrieved from the SDP.  This typically occurs once the session is
   already established and ongoing.

A.4.2.  Bandwidth Allocation

   Sometimes intermediaries do not act as B2BUA, in the sense that they
   don't modify SDP bodies, nor do they terminate SIP dialogs.  Still,
   however, they may use SDP information (e.g. codecs and media types)
   in order to control bandwidth allocation functions.  The bandwidth
   allocation is done per "m=" line, which means that it might not be
   enough if media associated with all "m=" lines try to use that
   bandwidth.  That may either simply lead to bad user experience, or to
   termination of the call.

A.5.  Candidate Gathering

   When using ICE, an candidate needs to be gathered for each port.
   This takes approximately 20 ms extra for each extra "m=" line due to
   the NAT pacing requirements.  All of this gather can be overlapped
   with other things while the page is loading to minimize the impact.
   If the client only wants to generate TURN or STUN ICE candidates for
   one of the "m=" lines and then use trickle ICE [TODO REF] to get the
   non host ICE candidates for the rest of the "m=" lines, it MAY do
   that and will not need any additional gathering time.

   Some people have suggested a TURN extension to get a bunch of TURN
   allocation at once.  This would only provide a single STUN result so
   in cases where the other end did not support BUNDLE, may cause more
   use of the TURN server but would be quick in the cases where both
   sides supported BUNDLE and would fall back to a successful call in
   the other cases.

A.6.  Happy Ending

   When discussing the issues above, the WG should consider different
   deployment scenarios, how common breakage is likely to occur, when
   breakage will occur, and how it can be fixed.  The WG also need to
   consider the scope of the mechanism: do we limit (or, at least put
   the main focus of) the scope to the RTCWEB work, or is the scope more
   general.

   But, at the end of the day, all we have to do is to make a choise,
   and hopefully end early in order to get cookies before everyone else.

